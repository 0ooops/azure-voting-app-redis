# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - master

# pool:
#   vmImage: 'Ubuntu-16.04'

# variables:
#   imageName: 'your-container-image-name:$(build.buildId)'

# steps:
# - script: docker build -f Dockerfile -t $(imageName) .
#   displayName: 'docker build'


resources:
- repo: self

queue:
  name: Hosted Ubuntu 1604

variables:
  AcrName: 'fibbyRegistry'
  AcrLogin: 'jiawa@microsoft.com'
  AcrPassword: 'wjylyjHED2'
  ImageName: 'my-app'
  
steps:
- bash: 'docker build -f $(System.DefaultWorkingDirectory)/**/Dockerfile -t $(AcrName).azurecr.io/$(ImageName):$(Build.BuildId) -t $(AcrName).azurecr.io/$(ImageName):latest $(System.DefaultWorkingDirectory)' 
  displayName: 'docker build'

- bash: 'docker login $(AcrName).azurecr.io -u $(AcrLogin) -p $(AcrPassword)' 
  displayName: 'docker login'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- bash: |
   docker push $(AcrName).azurecr.io/$(ImageName):$(Build.BuildId)
   docker push $(AcrName).azurecr.io/$(ImageName):latest 
  displayName: 'docker push'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: HelmInstaller@0
  displayName: 'Install Helm 2.11.0'
  inputs:
    helmVersion: 2.11.0

- task: HelmDeploy@0
  displayName: 'helm init --client-only'
  inputs:
    command: init
    arguments: '--client-only'

- task: HelmDeploy@0
  displayName: 'helm package'
  inputs:
    command: package
    chartPath: charts/sampleapp
    chartVersion: '$(Build.BuildId)'
    destination: $(Build.ArtifactStagingDirectory)

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts: helm-chart'
  inputs:
    ArtifactName: 'helm-chart'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))